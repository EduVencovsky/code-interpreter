{"version":3,"sources":["../../core/dist/index.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","ExpressionsInterpreter","ExpressionsParser","StringComparator","StringComparatorParser","Calculator","CalculatorParser","SimpleInterpreter","Token","NUM","PLUS","MINUS","EOF","MULT","DIV","LPAREN","RPAREN","DIF","BIG","BIGEQ","SML","SMLEQ","EQ","CHARS","AND","OR","type","toString","text","lexer","Lexer","currentToken","getNextToken","error","Error","eat","tokenType","factor","token","result","expr","term","includes","position","currentChar","advance","length","skipWhiteSpace","test","num","havePoint","isNaN","peek","Number","chars","quotes","count","peekPos","Node","BinOpNode","_super","left","op","right","_this","ExpressionNode","ComparisonNode","MathNode","NumNode","Chars","UnaryOp","tokenList","push","node","parse","visit","name","genericVisit","visitBinOpNode","parser","visitNumNode","visitUnaryOp","opType","eval","tree","char","visitChars","comparison","addition","multiplication","unary","visitExpressionNode","leftNode","rightNode","visitComparisonNode","visitMathNode","classes","App","useState","option","input","setInput","tokens","interpreterResult","setInterpreterResult","className","Typography","variant","Paper","Box","TextField","onChange","e","prev","target","Button","color","onClick","interpreter","m","FormControl","component","RadioGroup","FormControlLabel","control","Radio","label","flexDirection","display","overflow","width","map","x","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d79eca27.chunk.js","sourcesContent":["\"use strict\";\n// TO BETTER UNDERSTAND HOW IT WORKS\n// http://www.craftinginterpreters.com/parsing-expressions.html \n// https://ruslanspivak.com/lsbasi-part1/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpressionsInterpreter = exports.ExpressionsParser = exports.StringComparator = exports.StringComparatorParser = exports.Calculator = exports.CalculatorParser = exports.SimpleInterpreter = exports.Token = void 0;\nvar NUM = 'NUM';\nvar PLUS = 'PLUS';\nvar MINUS = 'MINUS';\nvar EOF = 'EOF';\nvar MULT = 'MULT';\nvar DIV = 'DIV';\nvar LPAREN = 'LPAREN';\nvar RPAREN = 'RPAREN';\nvar DIF = 'DIF';\nvar BIG = 'BIG';\nvar BIGEQ = 'BIGEQ';\nvar SML = 'SML';\nvar SMLEQ = 'SMLEQ';\nvar EQ = 'EQ';\nvar CHARS = 'CHARS';\nvar AND = 'AND';\nvar OR = 'OR';\nvar Token = /** @class */ (function () {\n    function Token(type, value) {\n        this.type = type;\n        this.value = value;\n    }\n    Token.prototype.toString = function () {\n        return \"Token(\" + this.type + \", \" + this.value + \")\";\n    };\n    return Token;\n}());\nexports.Token = Token;\nvar SimpleInterpreter = /** @class */ (function () {\n    function SimpleInterpreter(text) {\n        this.lexer = new Lexer(text);\n        this.currentToken = this.lexer.getNextToken();\n    }\n    SimpleInterpreter.prototype.error = function () {\n        throw new Error(\"Invalid syntax\");\n    };\n    SimpleInterpreter.prototype.eat = function (tokenType) {\n        if (this.currentToken.type === tokenType) {\n            this.currentToken = this.lexer.getNextToken();\n        }\n        else {\n            this.error();\n        }\n    };\n    SimpleInterpreter.prototype.factor = function () {\n        var token = this.currentToken;\n        if (token.type === NUM) {\n            this.eat(NUM);\n            return token.value;\n        }\n        else if (token.type === LPAREN) {\n            this.eat(LPAREN);\n            var result = this.expr();\n            this.eat(RPAREN);\n            return result;\n        }\n        this.error();\n    };\n    SimpleInterpreter.prototype.term = function () {\n        var result = this.factor();\n        while ([MULT, DIV].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === MULT) {\n                this.eat(MULT);\n                result = result * this.factor();\n            }\n            else if (token.type === DIV) {\n                this.eat(DIV);\n                result = result / this.factor();\n            }\n        }\n        return result;\n    };\n    SimpleInterpreter.prototype.expr = function () {\n        var result = this.term();\n        while ([PLUS, MINUS].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === PLUS) {\n                this.eat(PLUS);\n                result = result + this.term();\n            }\n            else if (token.type === MINUS) {\n                this.eat(MINUS);\n                result = result - this.term();\n            }\n        }\n        return result;\n    };\n    return SimpleInterpreter;\n}());\nexports.SimpleInterpreter = SimpleInterpreter;\nvar Lexer = /** @class */ (function () {\n    function Lexer(text) {\n        this.text = text;\n        this.position = 0;\n        this.currentChar = this.text[this.position];\n    }\n    Lexer.prototype.error = function () {\n        throw new Error(\"Invalid character \\\"\" + this.currentChar + \"\\\" at position \" + this.position);\n    };\n    Lexer.prototype.advance = function () {\n        this.position++;\n        this.currentChar = this.position > this.text.length - 1 ? null : this.text[this.position];\n    };\n    Lexer.prototype.skipWhiteSpace = function () {\n        while (this.currentChar != null && /\\s/.test(this.currentChar))\n            this.advance();\n    };\n    Lexer.prototype.num = function () {\n        var result = '';\n        var havePoint = false;\n        while (this.currentChar != null && !/\\s/.test(this.currentChar)) {\n            if (!isNaN(this.currentChar)) {\n                result += this.currentChar;\n                this.advance();\n            }\n            else if (!havePoint && this.currentChar === '.' && !isNaN(this.peek())) {\n                result += this.currentChar;\n                havePoint = true;\n                this.advance();\n            }\n            else {\n                break;\n            }\n        }\n        return Number(result);\n    };\n    Lexer.prototype.chars = function (quotes) {\n        if (quotes === void 0) { quotes = '\"'; }\n        var result = '';\n        this.advance();\n        while (this.currentChar != null && this.currentChar !== quotes) {\n            result += this.currentChar;\n            this.advance();\n        }\n        this.advance();\n        return String(result);\n    };\n    Lexer.prototype.peek = function (count) {\n        if (count === void 0) { count = 1; }\n        var peekPos = this.position + count;\n        return peekPos > this.text.length - 1 ? null : this.text[peekPos];\n    };\n    Lexer.prototype.getNextToken = function () {\n        while (this.currentChar != null) {\n            var token = null;\n            if (/\\s/.test(this.currentChar)) {\n                this.skipWhiteSpace();\n                continue;\n            }\n            else if (this.currentChar === '\"') {\n                token = new Token(CHARS, this.chars('\"'));\n                return token;\n            }\n            else if (!isNaN(this.currentChar)) {\n                token = new Token(NUM, this.num());\n                return token;\n            }\n            else if (this.currentChar === '+') {\n                this.advance();\n                token = new Token(PLUS, '+');\n                return token;\n            }\n            else if (this.currentChar === '-') {\n                this.advance();\n                token = new Token(MINUS, '-');\n                return token;\n            }\n            else if (this.currentChar === '*') {\n                this.advance();\n                token = new Token(MULT, '*');\n                return token;\n            }\n            else if (this.currentChar === '/') {\n                this.advance();\n                token = new Token(DIV, '/');\n                return token;\n            }\n            else if (this.currentChar === '(') {\n                this.advance();\n                token = new Token(LPAREN, '(');\n                return token;\n            }\n            else if (this.currentChar === ')') {\n                this.advance();\n                token = new Token(RPAREN, ')');\n                return token;\n            }\n            else if (this.currentChar === '&' && this.peek() === '&') {\n                this.advance();\n                this.advance();\n                token = new Token(AND, '&&');\n                return token;\n            }\n            else if (this.currentChar === '|' && this.peek() === '|') {\n                this.advance();\n                this.advance();\n                token = new Token('OR', '||');\n                return token;\n            }\n            else if (this.currentChar === '>') {\n                this.advance();\n                if (this.currentChar === '=') {\n                    this.advance();\n                    token = new Token(BIGEQ, '>=');\n                }\n                else {\n                    token = new Token(BIG, '>');\n                }\n                return token;\n            }\n            else if (this.currentChar === '<') {\n                this.advance();\n                if (this.currentChar === '=') {\n                    this.advance();\n                    token = new Token(SMLEQ, '<=');\n                }\n                else {\n                    token = new Token(SML, '<');\n                }\n                return token;\n            }\n            else if (this.currentChar === '=' && this.peek() === '=') {\n                this.advance();\n                this.advance();\n                token = new Token(EQ, '==');\n                return token;\n            }\n            else if (this.currentChar === '!' && this.peek() === '=') {\n                this.advance();\n                this.advance();\n                token = new Token(DIF, '!=');\n                return token;\n            }\n            this.error(this.currentChar);\n        }\n        return new Token(EOF, null);\n    };\n    return Lexer;\n}());\nvar Node = /** @class */ (function () {\n    function Node(token) {\n        this.token = token;\n    }\n    return Node;\n}());\nvar BinOpNode = /** @class */ (function (_super) {\n    __extends(BinOpNode, _super);\n    function BinOpNode(left, op, right) {\n        var _this = _super.call(this, op.token) || this;\n        _this.left = left;\n        _this.op = op;\n        _this.right = right;\n        return _this;\n    }\n    BinOpNode.prototype.toString = function () {\n        return \"left \" + this.left + \" op \" + this.left + \" right \" + this.left;\n    };\n    return BinOpNode;\n}(Node));\nvar ExpressionNode = /** @class */ (function () {\n    function ExpressionNode(left, op, right) {\n        this.left = left;\n        this.token = op;\n        this.op = op;\n        this.right = right;\n    }\n    ExpressionNode.prototype.toString = function () {\n        return \"left \" + this.left + \" op \" + this.left + \" right \" + this.left;\n    };\n    return ExpressionNode;\n}());\nvar ComparisonNode = /** @class */ (function () {\n    function ComparisonNode(left, op, right) {\n        this.left = left;\n        this.token = op;\n        this.op = op;\n        this.right = right;\n    }\n    ComparisonNode.prototype.toString = function () {\n        return \"left \" + this.left + \" op \" + this.left + \" right \" + this.left;\n    };\n    return ComparisonNode;\n}());\nvar MathNode = /** @class */ (function () {\n    function MathNode(left, op, right) {\n        this.left = left;\n        this.token = op;\n        this.op = op;\n        this.right = right;\n    }\n    MathNode.prototype.toString = function () {\n        return \"left \" + this.left + \" op \" + this.left + \" right \" + this.left;\n    };\n    return MathNode;\n}());\nvar NumNode = /** @class */ (function (_super) {\n    __extends(NumNode, _super);\n    function NumNode(token) {\n        var _this = this;\n        _this.token = token;\n        _this.value = token.value;\n        return _this;\n    }\n    return NumNode;\n}(Node));\nvar Chars = /** @class */ (function () {\n    function Chars(token) {\n        this.token = token;\n        this.value = token.value;\n    }\n    return Chars;\n}());\nvar UnaryOp = /** @class */ (function () {\n    function UnaryOp(op, expr) {\n        this.token = op;\n        this.op = op;\n        this.expr = expr;\n    }\n    return UnaryOp;\n}());\nvar CalculatorParser = /** @class */ (function () {\n    function CalculatorParser(text) {\n        this.lexer = new Lexer(text);\n        this.currentToken = this.lexer.getNextToken();\n        this.tokenList = [this.currentToken];\n    }\n    CalculatorParser.prototype.error = function () {\n        this.lexer.error();\n    };\n    CalculatorParser.prototype.eat = function (tokenType) {\n        if (this.currentToken.type === tokenType) {\n            this.currentToken = this.lexer.getNextToken();\n            this.tokenList.push(this.currentToken);\n        }\n        else {\n            this.error();\n        }\n    };\n    CalculatorParser.prototype.expr = function () {\n        var node = this.term();\n        while ([PLUS, MINUS].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === PLUS) {\n                this.eat(PLUS);\n            }\n            else if (token.type === MINUS) {\n                this.eat(MINUS);\n            }\n            node = new BinOpNode(node, token, this.term());\n        }\n        return node;\n    };\n    CalculatorParser.prototype.term = function () {\n        var node = this.factor();\n        while ([MULT, DIV].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === MULT) {\n                this.eat(MULT);\n            }\n            else if (token.type === DIV) {\n                this.eat(DIV);\n            }\n            node = new BinOpNode(node, token, this.factor());\n        }\n        return node;\n    };\n    CalculatorParser.prototype.factor = function () {\n        var token = this.currentToken;\n        if (token.type === PLUS) {\n            this.eat(PLUS);\n            return new UnaryOp(token, this.factor());\n        }\n        else if (token.type === MINUS) {\n            this.eat(MINUS);\n            return new UnaryOp(token, this.factor());\n        }\n        else if (token.type === NUM) {\n            this.eat(NUM);\n            return new NumNode(token);\n        }\n        else if (token.type === LPAREN) {\n            this.eat(LPAREN);\n            var node = this.expr();\n            this.eat(RPAREN);\n            return node;\n        }\n        this.error(this.currentToken.toString());\n    };\n    CalculatorParser.prototype.parse = function () {\n        var node = this.expr();\n        return this.currentToken.type === EOF ? node : this.error(this.currentToken.toString());\n    };\n    return CalculatorParser;\n}());\nexports.CalculatorParser = CalculatorParser;\nvar Calculator = /** @class */ (function () {\n    function Calculator() {\n    }\n    Calculator.prototype.visit = function (node) {\n        var methodName = \"visit\" + node.constructor.name;\n        var visitor = this[methodName] || this.genericVisit;\n        return visitor.call(this, node);\n    };\n    Calculator.prototype.genericVisit = function (node) {\n        throw new Error(\"No \" + node.constructor.name + \" method\");\n    };\n    Calculator.prototype.visitBinOpNode = function (node) {\n        if (node.op.type === PLUS) {\n            return this.visit(node.left) + this.visit(node.right);\n        }\n        else if (node.op.type === MINUS) {\n            return this.visit(node.left) - this.visit(node.right);\n        }\n        else if (node.op.type === MULT) {\n            return this.visit(node.left) * this.visit(node.right);\n        }\n        else if (node.op.type === DIV) {\n            return this.visit(node.left) / this.visit(node.right);\n        }\n        this.parser.error(node.toString());\n    };\n    Calculator.prototype.visitNumNode = function (node) {\n        return node.value;\n    };\n    Calculator.prototype.visitUnaryOp = function (node) {\n        var opType = node.op.type;\n        if (opType === PLUS) {\n            return +this.visit(node.expr);\n        }\n        else if (opType === MINUS) {\n            return -this.visit(node.expr);\n        }\n        this.parser.error(node.toString());\n    };\n    Calculator.prototype.eval = function (text) {\n        this.parser = new CalculatorParser(text);\n        var tree = this.parser.parse();\n        return this.visit(tree);\n    };\n    return Calculator;\n}());\nexports.Calculator = Calculator;\nvar StringComparatorParser = /** @class */ (function () {\n    function StringComparatorParser(text) {\n        this.lexer = new Lexer(text);\n        this.currentToken = this.lexer.getNextToken();\n        this.tokenList = [this.currentToken];\n    }\n    StringComparatorParser.prototype.error = function (char) {\n        this.lexer.error(char);\n    };\n    StringComparatorParser.prototype.eat = function (tokenType) {\n        if (this.currentToken.type === tokenType) {\n            this.currentToken = this.lexer.getNextToken();\n            this.tokenList.push(this.currentToken);\n        }\n        else {\n            this.error(this.currentToken.toString());\n        }\n    };\n    StringComparatorParser.prototype.expr = function () {\n        var node = this.term();\n        while ([AND, OR].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === AND) {\n                this.eat(AND);\n            }\n            else if (token.type === OR) {\n                this.eat(OR);\n            }\n            node = new BinOpNode(node, token, this.term());\n        }\n        return node;\n    };\n    StringComparatorParser.prototype.term = function () {\n        var node = this.factor();\n        while ([BIG, BIGEQ, SML, SMLEQ, EQ, DIF].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === BIG) {\n                this.eat(BIG);\n            }\n            else if (token.type === BIGEQ) {\n                this.eat(BIGEQ);\n            }\n            else if (token.type === SML) {\n                this.eat(SML);\n            }\n            else if (token.type === SMLEQ) {\n                this.eat(SMLEQ);\n            }\n            else if (token.type === EQ) {\n                this.eat(EQ);\n            }\n            else if (token.type === DIF) {\n                this.eat(DIF);\n            }\n            node = new BinOpNode(node, token, this.factor());\n        }\n        return node;\n    };\n    StringComparatorParser.prototype.factor = function () {\n        var token = this.currentToken;\n        if (token.type === CHARS) {\n            this.eat(CHARS);\n            return new Chars(token);\n        }\n        else if (token.type === LPAREN) {\n            this.eat(LPAREN);\n            var node = this.expr();\n            this.eat(RPAREN);\n            return node;\n        }\n        this.error();\n    };\n    StringComparatorParser.prototype.parse = function () {\n        var node = this.expr();\n        return this.currentToken.type === EOF ? node : this.error();\n    };\n    return StringComparatorParser;\n}());\nexports.StringComparatorParser = StringComparatorParser;\nvar StringComparator = /** @class */ (function () {\n    function StringComparator() {\n    }\n    StringComparator.prototype.error = function () {\n        this.parser.error();\n    };\n    StringComparator.prototype.visit = function (node) {\n        var methodName = \"visit\" + node.constructor.name;\n        var visitor = this[methodName] || this.genericVisit;\n        return visitor.call(this, node);\n    };\n    StringComparator.prototype.genericVisit = function (node) {\n        throw new Error(\"No \" + node.constructor.name + \" method\");\n    };\n    StringComparator.prototype.visitBinOpNode = function (node) {\n        if (node.op.type === AND) {\n            return this.visit(node.left) && this.visit(node.right);\n        }\n        else if (node.op.type === OR) {\n            return this.visit(node.left) || this.visit(node.right);\n        }\n        else if (node.op.type === BIG) {\n            return this.visit(node.left) > this.visit(node.right);\n        }\n        else if (node.op.type === BIGEQ) {\n            return this.visit(node.left) >= this.visit(node.right);\n        }\n        else if (node.op.type === SML) {\n            return this.visit(node.left) < this.visit(node.right);\n        }\n        else if (node.op.type === SMLEQ) {\n            return this.visit(node.left) <= this.visit(node.right);\n        }\n        else if (node.op.type === EQ) {\n            return this.visit(node.left) == this.visit(node.right);\n        }\n        else if (node.op.type === DIF) {\n            return this.visit(node.left) != this.visit(node.right);\n        }\n        this.error();\n    };\n    StringComparator.prototype.visitChars = function (node) {\n        return node.value;\n    };\n    StringComparator.prototype.eval = function (text) {\n        this.parser = new StringComparatorParser(text);\n        var tree = this.parser.parse();\n        return this.visit(tree);\n    };\n    return StringComparator;\n}());\nexports.StringComparator = StringComparator;\nvar ExpressionsParser = /** @class */ (function () {\n    function ExpressionsParser(text) {\n        this.lexer = new Lexer(text);\n        this.currentToken = this.lexer.getNextToken();\n        this.tokenList = [this.currentToken];\n    }\n    ExpressionsParser.prototype.error = function () {\n        this.lexer.error();\n    };\n    ExpressionsParser.prototype.eat = function (tokenType) {\n        if (this.currentToken.type === tokenType) {\n            this.currentToken = this.lexer.getNextToken();\n            this.tokenList.push(this.currentToken);\n        }\n        else {\n            this.error();\n        }\n    };\n    ExpressionsParser.prototype.expr = function () {\n        var node = this.comparison();\n        while ([AND, OR].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === AND) {\n                this.eat(AND);\n            }\n            else if (token.type === OR) {\n                this.eat(OR);\n            }\n            node = new ExpressionNode(node, token, this.comparison());\n        }\n        return node;\n    };\n    ExpressionsParser.prototype.comparison = function () {\n        var node = this.addition();\n        while ([BIG, BIGEQ, SML, SMLEQ, EQ, DIF].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === BIG) {\n                this.eat(BIG);\n            }\n            else if (token.type === BIGEQ) {\n                this.eat(BIGEQ);\n            }\n            else if (token.type === SML) {\n                this.eat(SML);\n            }\n            else if (token.type === SMLEQ) {\n                this.eat(SMLEQ);\n            }\n            else if (token.type === EQ) {\n                this.eat(EQ);\n            }\n            else if (token.type === DIF) {\n                this.eat(DIF);\n            }\n            node = new ComparisonNode(node, token, this.addition());\n        }\n        return node;\n    };\n    ExpressionsParser.prototype.addition = function () {\n        var node = this.multiplication();\n        while ([PLUS, MINUS].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === PLUS) {\n                this.eat(PLUS);\n            }\n            else if (token.type === MINUS) {\n                this.eat(MINUS);\n            }\n            node = new MathNode(node, token, this.multiplication());\n        }\n        return node;\n    };\n    ExpressionsParser.prototype.multiplication = function () {\n        var node = this.unary();\n        while ([MULT, DIV].includes(this.currentToken.type)) {\n            var token = this.currentToken;\n            if (token.type === MULT) {\n                this.eat(MULT);\n            }\n            else if (token.type === DIV) {\n                this.eat(DIV);\n            }\n            node = new MathNode(node, token, this.unary());\n        }\n        return node;\n    };\n    ExpressionsParser.prototype.unary = function () {\n        var token = this.currentToken;\n        if (token.type === PLUS) {\n            this.eat(PLUS);\n            return new UnaryOp(token, this.unary());\n        }\n        else if (token.type === MINUS) {\n            this.eat(MINUS);\n            return new UnaryOp(token, this.unary());\n        }\n        else if (token.type === NUM) {\n            this.eat(NUM);\n            return new NumNode(token);\n        }\n        else if (token.type === CHARS) {\n            this.eat(CHARS);\n            return new Chars(token);\n        }\n        else if (token.type === LPAREN) {\n            this.eat(LPAREN);\n            var node = this.expr();\n            this.eat(RPAREN);\n            return node;\n        }\n        this.error();\n    };\n    ExpressionsParser.prototype.parse = function () {\n        var node = this.expr();\n        if (this.currentToken.type !== EOF) {\n            this.error();\n        }\n        return node;\n    };\n    return ExpressionsParser;\n}());\nexports.ExpressionsParser = ExpressionsParser;\nvar ExpressionsInterpreter = /** @class */ (function () {\n    function ExpressionsInterpreter() {\n    }\n    ExpressionsInterpreter.prototype.visit = function (node) {\n        var methodName = \"visit\" + node.constructor.name;\n        var visitor = this[methodName] || this.genericVisit;\n        return visitor.call(this, node);\n    };\n    ExpressionsInterpreter.prototype.genericVisit = function (node) {\n        throw new Error(\"No \" + node.constructor.name + \" method\");\n    };\n    ExpressionsInterpreter.prototype.error = function () {\n        throw Error(\"Interpretation Error\");\n    };\n    ExpressionsInterpreter.prototype.visitExpressionNode = function (node) {\n        var leftNode = this.visit(node.left);\n        var rightNode = this.visit(node.right);\n        if (typeof leftNode !== 'boolean' || typeof rightNode !== 'boolean') {\n            this.error();\n        }\n        if (node.op.type === AND) {\n            return leftNode && rightNode;\n        }\n        else if (node.op.type === OR) {\n            return leftNode || rightNode;\n        }\n        this.error();\n    };\n    ExpressionsInterpreter.prototype.visitComparisonNode = function (node) {\n        if (node.op.type === BIG) {\n            return this.visit(node.left) > this.visit(node.right);\n        }\n        else if (node.op.type === BIGEQ) {\n            return this.visit(node.left) >= this.visit(node.right);\n        }\n        else if (node.op.type === SML) {\n            return this.visit(node.left) < this.visit(node.right);\n        }\n        else if (node.op.type === SMLEQ) {\n            return this.visit(node.left) <= this.visit(node.right);\n        }\n        else if (node.op.type === EQ) {\n            return this.visit(node.left) == this.visit(node.right);\n        }\n        else if (node.op.type === DIF) {\n            return this.visit(node.left) != this.visit(node.right);\n        }\n        this.error();\n    };\n    ExpressionsInterpreter.prototype.visitMathNode = function (node) {\n        if (node.op.type === PLUS) {\n            return this.visit(node.left) + this.visit(node.right);\n        }\n        else if (node.op.type === MINUS) {\n            return this.visit(node.left) - this.visit(node.right);\n        }\n        else if (node.op.type === MULT) {\n            return this.visit(node.left) * this.visit(node.right);\n        }\n        else if (node.op.type === DIV) {\n            return this.visit(node.left) / this.visit(node.right);\n        }\n        this.error();\n    };\n    ExpressionsInterpreter.prototype.visitUnaryOp = function (node) {\n        var opType = node.op.type;\n        if (opType === PLUS) {\n            return +this.visit(node.expr);\n        }\n        else if (opType === MINUS) {\n            return -this.visit(node.expr);\n        }\n        this.parser.error();\n    };\n    ExpressionsInterpreter.prototype.visitChars = function (node) {\n        return node.token.type === CHARS ? node.value : this.error();\n    };\n    ExpressionsInterpreter.prototype.visitNumNode = function (node) {\n        return node.token.type === NUM ? node.value : this.error();\n    };\n    ExpressionsInterpreter.prototype.eval = function (text) {\n        this.parser = new ExpressionsParser(text);\n        var tree = this.parser.parse();\n        var result = this.visit(tree);\n        return typeof result === 'boolean' ? result : this.error();\n    };\n    return ExpressionsInterpreter;\n}());\nexports.ExpressionsInterpreter = ExpressionsInterpreter;\n","import React, { Component, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  Calculator,\n  StringComparator,\n  ExpressionsInterpreter,\n  Token,\n  TokenType,\n} from \"@expression-interpreter/core\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Paper,\n  Radio,\n  RadioGroup,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\n\nconst classes = {\n  Calculator: new Calculator(),\n  StringComparator: new StringComparator(),\n  ExpressionsInterpreter: new ExpressionsInterpreter(),\n};\n\ntype ValidClasses = keyof typeof classes;\n\nconst isKeyofClasses = (value: string): value is ValidClasses => {\n  return value in classes;\n};\n\ninterface InterpreterResult {\n  result: string;\n  tokens: Token<TokenType>[];\n}\n\ninterface InputOption {\n  value: string;\n  option: ValidClasses;\n}\n\n// 1 + 1 + 2 == 4 - 8 && 1 + 2 + 3 == 5 - 2\n\nconst App = () => {\n  const [input, setInput] = useState<InputOption>({\n    value: \"\",\n    option: \"ExpressionsInterpreter\",\n  });\n  const [interpreterResult, setInterpreterResult] = useState<InterpreterResult>(\n    {\n      result: \"\",\n      tokens: [],\n    }\n  );\n\n  const interpret = () => {\n    let result = \"\";\n    const interpreter = classes[input.option];\n\n    try {\n      result = interpreter.eval(input.value);\n    } catch (error) {\n      result = error;\n    }\n    setInterpreterResult({\n      result: result.toString(),\n      tokens: interpreter.parser?.tokenList || [],\n    });\n  };\n\n  const handleOptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (isKeyofClasses(e.target.value)) {\n      setInput({\n        value: \"\",\n        option: e.target.value,\n      });\n      setInterpreterResult({\n        tokens: [],\n        result: \"\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typography variant=\"h1\">{interpreterResult.result}</Typography>\n        <Paper>\n          <Box>\n            <Box>\n              <TextField\n              variant=\"outlined\"\n                value={input.value}\n                onChange={(e) =>\n                  setInput((prev) => ({ ...prev, value: e.target.value }))\n                }\n              />\n            </Box>\n            <Button variant=\"contained\" color=\"primary\" onClick={interpret}>\n              Interpretar\n            </Button>\n          </Box>\n          <Box m={1}>\n            <FormControl component=\"fieldset\">\n              <RadioGroup value={input.option} onChange={handleOptionChange}>\n                <FormControlLabel\n                  value=\"Calculator\"\n                  control={<Radio />}\n                  label=\"Calculator\"\n                />\n                <FormControlLabel\n                  value=\"StringComparator\"\n                  control={<Radio />}\n                  label=\"String Comparator\"\n                />\n                <FormControlLabel\n                  value=\"ExpressionsInterpreter\"\n                  control={<Radio />}\n                  label=\"Expressions Interpreter\"\n                />\n              </RadioGroup>\n            </FormControl>\n          </Box>\n        </Paper>\n        <Box flexDirection=\"row\" display=\"flex\" overflow=\"auto\" width=\"90%\">\n          {interpreterResult.tokens.map((x, i) => (\n            <Box key={i} m={1}>\n              <Paper>\n                <Box p={1}>\n                  <Box>\n                    <Typography variant=\"h5\">{x.type}</Typography>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"h6\">{x.value || \"\\u00A0\"}</Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Box>\n          ))}\n        </Box>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}